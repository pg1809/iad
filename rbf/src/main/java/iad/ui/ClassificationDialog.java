package iad.ui;

import iad.network.MultiLayerNetwork;
import iad.network.centers.KMeansStrategy;
import iad.network.exceptions.CannotCreateNetworkException;
import iad.network.factory.MultiLayerNetworkFactory;
import iad.network.input.ClassificationDataProvider;
import iad.network.input.InputRow;
import iad.network.neuron.AbstractNeuron;
import iad.network.normalization.MinMaxInputNormalizer;
import iad.network.output.ClassificationMatrixGenerator;
import iad.network.strategy.NeuronStrategy;
import iad.network.strategy.bp.BiasStrategyDecorator;
import iad.network.strategy.bp.IdentityActivationBPS;
import iad.network.training.ThresholdEpochNetworkTrainer;
import iad.ui.exceptions.EmptyInputFieldException;
import iad.ui.exceptions.IncorrectParamsStringException;
import iad.ui.plot.PlotGenerator;
import iad.ui.plot.PlotNamer;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author PiotrGrzelak
 */
public class ClassificationDialog extends javax.swing.JDialog {

    private final PlotGenerator plotGenerator;

    private final ClassificationMatrixGenerator matrixGenerator;

    private final MinMaxInputNormalizer normalizer = new MinMaxInputNormalizer();

    private MultiLayerNetwork network;

    private int inputNeurons;

    private int outputNeurons;

    private int hiddenNeurons;

    public ClassificationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        plotGenerator = new PlotGenerator();
        matrixGenerator = new ClassificationMatrixGenerator();

        networkCreationParamsPanel.fixNetworkOutputField(3);
        networkCreationParamsPanel.setNetworkInputsField(4);
        learningParamsInputPanel.setDefaultLearningRate(0.01);
        learningParamsInputPanel.setDefaultMomentum(0.8);
        learningParamsInputPanel.setDefaultError(0.001);
        learningParamsInputPanel.setDefaultEpochNum(500);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        headerLabel = new javax.swing.JLabel();
        headerSeparator = new javax.swing.JSeparator();
        startButtonPanel = new javax.swing.JPanel();
        trainNetworkButton = new javax.swing.JButton();
        testNetworkButton = new javax.swing.JButton();
        downSeparator = new javax.swing.JSeparator();
        networkCreationParamsPanel = new iad.ui.NetworkCreationParamsPanel();
        createNetworkPanel = new javax.swing.JPanel();
        createNetworkButton = new javax.swing.JButton();
        createNetworkSeparator = new javax.swing.JSeparator();
        learningParamsInputPanel = new iad.ui.LearningParamsInputPanel();
        jLabel1 = new javax.swing.JLabel();
        objectParamsTextField = new javax.swing.JTextField();
        threePhaseLearningCheckbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Klasyfikacja");

        headerLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        headerLabel.setText("Klasyfikacja");
        headerPanel.add(headerLabel);

        trainNetworkButton.setText("Trenuj sieć");
        trainNetworkButton.setEnabled(false);
        trainNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainNetworkButtonActionPerformed(evt);
            }
        });
        startButtonPanel.add(trainNetworkButton);

        testNetworkButton.setText("Testuj sieć");
        testNetworkButton.setEnabled(false);
        testNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testNetworkButtonActionPerformed(evt);
            }
        });
        startButtonPanel.add(testNetworkButton);

        createNetworkButton.setText("Stwórz sieć");
        createNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNetworkButtonActionPerformed(evt);
            }
        });
        createNetworkPanel.add(createNetworkButton);

        jLabel1.setText("Wybrane cechy obiektu do analizy:");

        objectParamsTextField.setText("0 1 2 3");
        objectParamsTextField.setMinimumSize(new java.awt.Dimension(100, 25));
        objectParamsTextField.setPreferredSize(new java.awt.Dimension(100, 25));

        threePhaseLearningCheckbox.setText("Nauka 3-fazowa");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(headerSeparator)
            .addComponent(startButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(downSeparator)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(learningParamsInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(networkCreationParamsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createNetworkPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createNetworkSeparator))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(objectParamsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(threePhaseLearningCheckbox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(headerSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(networkCreationParamsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(threePhaseLearningCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createNetworkPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createNetworkSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(learningParamsInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(objectParamsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(downSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trainNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainNetworkButtonActionPerformed
        if (network == null) {
            return;
        }

        try {
            JFileChooser trainingDataFileChooser = new JFileChooser(".");
            int result = trainingDataFileChooser.showOpenDialog(this);

            if (result == JFileChooser.CANCEL_OPTION) {
                return;
            }

            File chosenFile = trainingDataFileChooser.getSelectedFile();

            int maxEpochNum = learningParamsInputPanel.getMaximumEpochNumber();
            double learningRate = learningParamsInputPanel.getLearningRate();
            double momentumFactor = learningParamsInputPanel.getMomentumFactor();
            double error = learningParamsInputPanel.getErrorThreshold();

            int[] classificationInputs = readClassificationInputsNumbers();

            ClassificationDataProvider provider = new ClassificationDataProvider(
                    chosenFile, outputNeurons, " ", classificationInputs, normalizer);

            List<InputRow> trainingData = provider.provideAllRows();

            ThresholdEpochNetworkTrainer trainer
                    = new ThresholdEpochNetworkTrainer(maxEpochNum, error, learningRate, momentumFactor, new KMeansStrategy());
            List<Double> meanSquaredError = trainer.trainNetwork(network, trainingData);

            System.out.println(meanSquaredError.get(meanSquaredError.size() - 1));

            PlotNamer plotNamer = new PlotNamer();
            plotNamer.setBaseName("error").setEpochs(meanSquaredError.size())
                    .setLearningRate(learningRate).setMomentumFactor(momentumFactor);

            plotGenerator.generateErrorChart(meanSquaredError, plotNamer.generateName());

            List<double[]> networkResults = new ArrayList<>(trainingData.size());
            trainingData.stream().forEach(
                    (InputRow row) -> networkResults.add(network.runNetwork(row.getValues()))
            );

            List<double[]> expectedResults = trainingData.stream()
                    .map((InputRow row) -> row.getExpectedOutput()).collect(Collectors.toList());

            int[][] classificationMatrix
                    = matrixGenerator.generateClassificationMatrix(expectedResults, networkResults, outputNeurons);
            matrixGenerator.saveMatrixToFile("classifMatrixTraining.txt", classificationMatrix);

            ClassificationMatrixDialog matrixDialog = new ClassificationMatrixDialog((Frame) this.getParent(), classificationMatrix);
            matrixDialog.setVisible(true);
        } catch (EmptyInputFieldException | IncorrectParamsStringException | IOException ex) {
            Logger.getLogger(ClassificationDialog.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Błąd", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_trainNetworkButtonActionPerformed

    private void testNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testNetworkButtonActionPerformed
        try {
            if (network == null) {
                return;
            }

            JFileChooser trainingDataFileChooser = new JFileChooser(".");
            int result = trainingDataFileChooser.showOpenDialog(this);
            if (result == JFileChooser.CANCEL_OPTION) {
                return;
            }
            File chosenFile = trainingDataFileChooser.getSelectedFile();

            int[] classificationInputs = readClassificationInputsNumbers();

            ClassificationDataProvider provider = new ClassificationDataProvider(
                    chosenFile, outputNeurons, " ", classificationInputs, normalizer);
            List<InputRow> data = provider.provideAllRows();

            List<double[]> networkResults = new ArrayList<>(data.size());
            double overallError = 0;
            for (InputRow row : data) {
                double[] output = network.runNetwork(row.getValues());

                double idealOutput = row.getExpectedOutput()[0];
                overallError += Math.pow(idealOutput - output[0], 2);

                networkResults.add(output);
            }
            overallError /= data.size() * 2;

            System.out.println(overallError);
            
            List<double[]> expectedResults = data.stream()
                    .map((InputRow row) -> row.getExpectedOutput()).collect(Collectors.toList());

            int[][] classificationMatrix
                    = matrixGenerator.generateClassificationMatrix(expectedResults, networkResults, outputNeurons);
            matrixGenerator.saveMatrixToFile("classifMatrixTest.txt", classificationMatrix);

            ClassificationMatrixDialog matrixDialog = new ClassificationMatrixDialog((Frame) this.getParent(), classificationMatrix);
            matrixDialog.setVisible(true);
        } catch (IOException | IncorrectParamsStringException ex) {
            Logger.getLogger(ClassificationDialog.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Błąd", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_testNetworkButtonActionPerformed

    private void createNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNetworkButtonActionPerformed
        try {
            inputNeurons = networkCreationParamsPanel.getNetworkInputsNum();
            outputNeurons = networkCreationParamsPanel.getNetworkOutputsNum();
            hiddenNeurons = networkCreationParamsPanel.getHiddenNeuronsNum();

            NeuronStrategy strategy = new BiasStrategyDecorator(IdentityActivationBPS.getInstance());
            IdentityActivationBPS identityStrategy = IdentityActivationBPS.getInstance();
            MultiLayerNetworkFactory factory = new MultiLayerNetworkFactory(
                    new int[]{inputNeurons, hiddenNeurons, outputNeurons}, 
                    identityStrategy, true, threePhaseLearningCheckbox.isSelected());
            network = factory.createNetwork();
            network.getOutputLayer().getNeurons().stream().forEach((AbstractNeuron n) -> n.setStrategy(strategy));

            JOptionPane.showMessageDialog(this, "Tworzenie sieci zakończone sukcesem", "Sukces",
                    JOptionPane.INFORMATION_MESSAGE);

            trainNetworkButton.setEnabled(true);
            testNetworkButton.setEnabled(true);
        } catch (EmptyInputFieldException | CannotCreateNetworkException ex) {
            Logger.getLogger(ApproximationDialog.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Błąd", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_createNetworkButtonActionPerformed

    private int[] readClassificationInputsNumbers() throws IncorrectParamsStringException {
        String classifiedObjectParamsText = objectParamsTextField.getText();
        int networkInputsNum = network.getInputLayer().getNeurons().size();
        if (!classifiedObjectParamsText.matches("([0-3]\\s){" + (networkInputsNum - 1) + "}[0-3]")) {
            throw new IncorrectParamsStringException();
        }
        String[] objectParamsStringArray = classifiedObjectParamsText.split(" ");
        int[] paramsForClassification = new int[networkInputsNum];
        for (int i = 0; i < objectParamsStringArray.length; ++i) {
            paramsForClassification[i] = Integer.parseInt(objectParamsStringArray[i]);
        }

        return paramsForClassification;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createNetworkButton;
    private javax.swing.JPanel createNetworkPanel;
    private javax.swing.JSeparator createNetworkSeparator;
    private javax.swing.JSeparator downSeparator;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JSeparator headerSeparator;
    private javax.swing.JLabel jLabel1;
    private iad.ui.LearningParamsInputPanel learningParamsInputPanel;
    private iad.ui.NetworkCreationParamsPanel networkCreationParamsPanel;
    private javax.swing.JTextField objectParamsTextField;
    private javax.swing.JPanel startButtonPanel;
    private javax.swing.JButton testNetworkButton;
    private javax.swing.JCheckBox threePhaseLearningCheckbox;
    private javax.swing.JButton trainNetworkButton;
    // End of variables declaration//GEN-END:variables
}
